import React, { useState, useEffect } from 'react';
import { 
  Box, Typography, Card, CardContent, CardActions, Button, Grid,
  Chip, CircularProgress, Alert, Divider, IconButton, Tooltip,
  Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper
} from '@mui/material';
import CloudDownloadIcon from '@mui/icons-material/CloudDownload';
import DeleteIcon from '@mui/icons-material/Delete';
import DescriptionIcon from '@mui/icons-material/Description';
import { useTheme } from '@mui/material/styles';
import axios from 'axios';
import { API_URL } from '../../config';
import { getAuthHeader } from '../../services/authService';

const GeneratedDocumentList = () => {
  const [documents, setDocuments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const theme = useTheme();

  useEffect(() => {
    fetchDocuments();
  }, []);

  const fetchDocuments = async () => {
    try {
      setLoading(true);
      setError('');
      
      const response = await axios.get(`${API_URL}/generated-documents/recent/`, { 
        headers: getAuthHeader() 
      });
      setDocuments(response.data);
    } catch (err) {
      console.error('Error fetching generated documents:', err);
      setError('Failed to load generated documents. Please try again.');
    } finally {
      setLoading(false);
    }
  };

  const handleDownload = (document) => {
    // Create a link to download the generated file
    const link = document.createElement('a');
    link.href = document.generated_file;
    link.download = `${document.template_name}-${new Date(document.created_at).toISOString().split('T')[0]}`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const handleDelete = async (documentId) => {
    if (!window.confirm('Are you sure you want to delete this document?')) {
      return;
    }
    
    try {
      await axios.delete(`${API_URL}/generated-documents/${documentId}/`, {
        headers: getAuthHeader()
      });
      // Refresh the document list
      fetchDocuments();
    } catch (err) {
      console.error('Error deleting document:', err);
      setError('Failed to delete document. Please try again.');
    }
  };

  const getStatusChipColor = (status) => {
    switch (status) {
      case 'completed':
        return 'success';
      case 'processing':
        return 'warning';
      case 'failed':
        return 'error';
      default:
        return 'default';
    }
  };

  if (loading) {
    return (
      <Box sx={{ display: 'flex', justifyContent: 'center', p: 3 }}>
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return <Alert severity="error">{error}</Alert>;
  }

  if (documents.length === 0) {
    return (
      <Alert severity="info">
        No generated documents found. Go to the Templates tab to generate a document.
      </Alert>
    );
  }

  return (
    <TableContainer component={Paper}>
      <Table sx={{ minWidth: 650 }} aria-label="generated documents table">
        <TableHead>
          <TableRow>
            <TableCell>Template</TableCell>
            <TableCell>Department</TableCell>
            <TableCell>Generated By</TableCell>
            <TableCell>Date</TableCell>
            <TableCell>Status</TableCell>
            <TableCell align="right">Actions</TableCell>
          </TableRow>
        </TableHead>
        <TableBody>
          {documents.map((doc) => (
            <TableRow
              key={doc.id}
              sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
            >
              <TableCell component="th" scope="row">
                <Box sx={{ display: 'flex', alignItems: 'center' }}>
                  <DescriptionIcon sx={{ mr: 1, color: theme.palette.primary.main }} />
                  <Typography variant="body2">{doc.template_name}</Typography>
                </Box>
              </TableCell>
              <TableCell>{doc.department_name}</TableCell>
              <TableCell>{doc.generated_by_username || 'Unknown'}</TableCell>
              <TableCell>{new Date(doc.created_at).toLocaleString()}</TableCell>
              <TableCell>
                <Chip 
                  label={doc.status_display} 
                  size="small"
                  color={getStatusChipColor(doc.status)}
                />
              </TableCell>
              <TableCell align="right">
                {doc.status === 'completed' && (
                  <Tooltip title="Download Document">
                    <IconButton 
                      size="small" 
                      onClick={() => handleDownload(doc)}
                      color="primary"
                    >
                      <CloudDownloadIcon />
                    </IconButton>
                  </Tooltip>
                )}
                <Tooltip title="Delete Document">
                  <IconButton 
                    size="small" 
                    onClick={() => handleDelete(doc.id)}
                    color="error"
                  >
                    <DeleteIcon />
                  </IconButton>
                </Tooltip>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </TableContainer>
  );
};

export default GeneratedDocumentList;
